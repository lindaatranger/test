{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-28T02:52:27.580Z",
    "end": "2024-10-28T02:52:34.165Z",
    "duration": 6585,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "13194c64-f4a2-4626-a922-c41b73b28a97",
      "title": "",
      "fullFile": "/Users/dannyyan/Documents/test/tests/RegressionTest.js",
      "file": "/tests/RegressionTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ff66c5be-b62c-4f03-9417-8a67bfd90c46",
          "title": "Selenium Sample Test",
          "fullFile": "/Users/dannyyan/Documents/test/tests/RegressionTest.js",
          "file": "/tests/RegressionTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Selenium Sample Test\"",
              "fullTitle": "Selenium Sample Test \"before all\" hook in \"Selenium Sample Test\"",
              "timedOut": false,
              "duration": 550,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set Chrome options for headless mode\nconst options = new chrome.Options();\noptions.addArguments('--headless'); // Run in headless mode\noptions.addArguments('--disable-gpu'); // Disable GPU acceleration (optional)\noptions.addArguments('--no-sandbox'); // Bypass OS security model (optional)\noptions.addArguments('--window-size=1920,1080'); // Set window size\ndriver = await new Builder()\n    .forBrowser('chrome')\n    .setChromeOptions(options)\n    .build();",
              "err": {},
              "uuid": "4851529a-a513-4ed1-a86b-c66687a023df",
              "parentUUID": "ff66c5be-b62c-4f03-9417-8a67bfd90c46",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Selenium Sample Test\"",
              "fullTitle": "Selenium Sample Test \"after all\" hook in \"Selenium Sample Test\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "b3a08db8-4d43-4b60-9f89-efe7caa4ab53",
              "parentUUID": "ff66c5be-b62c-4f03-9417-8a67bfd90c46",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should be able to login",
              "fullTitle": "Selenium Sample Test should be able to login",
              "timedOut": false,
              "duration": 5979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://dev.rangerrfx.com');\n\n       //Wait the email field is visible and enabled\nconst loginEmailField = await driver.wait(until.elementLocated(By.id('1-email')), 10000);\nawait driver.wait(until.elementIsVisible(loginEmailField), 10000);\nawait driver.wait(until.elementIsEnabled(loginEmailField), 10000);\nawait loginEmailField.sendKeys(\"linda502@hotmail.com\");\n// Wait for the password field to be present and visible\nawait driver.wait(until.elementLocated(By.id('1-password')), 10000);\nconst loginPwdField = await driver.findElement(By.id('1-password'));\nawait loginPwdField.sendKeys(\"Pass1234\");\n// Wait for the login button to be present and clickable\nconst loginBtn = await driver.wait(until.elementLocated(By.id('1-submit')), 10000);\nawait driver.wait(until.elementIsVisible(loginBtn), 10000); // Ensure it's visible\nawait loginBtn.click();\n// Wait for the page to load and the title to change\nawait driver.wait(until.titleIs('RangerRFX'), 10000);\n// Get the title after the login\nconst dashboardPageTitle = await driver.getTitle();\nassert.strictEqual(dashboardPageTitle, 'RangerRFX');",
              "err": {},
              "uuid": "109338c0-cfa6-499a-89c0-492c89df2632",
              "parentUUID": "ff66c5be-b62c-4f03-9417-8a67bfd90c46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "109338c0-cfa6-499a-89c0-492c89df2632"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5979,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "report",
        "reportDir": "reports",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}